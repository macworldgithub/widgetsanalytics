require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const axios = require('axios');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(express.json());

// MongoDB Schemas
const visitorSchema = new mongoose.Schema({
  event: String,
  timestamp: Date,
  ip: String,
  widgetId: { type: String, required: true, index: true },
  location: {
    country: String,
    region: String,
  },
  metadata: { type: mongoose.Schema.Types.Mixed, default: {} },
});
const Visitor = mongoose.model('Visitor', visitorSchema);

const widgetSchema = new mongoose.Schema({
  widgetId: { type: String, required: true, unique: true },
  name: String,
  createdAt: Date,
});
const Widget = mongoose.model('Widget', widgetSchema);

// Connect to MongoDB with retry logic
const connectWithRetry = () => {
  mongoose
    .connect(process.env.MONGODB_URI || 'mongodb+srv://macworldgithub:SirBilal1234@cluster0.kaqy2pl.mongodb.net/chatbot')
    .then(() => console.log('Connected to MongoDB'))
    .catch((err) => {
      console.error('MongoDB connection error:', err);
      setTimeout(connectWithRetry, 5000); // Retry after 5 seconds
    });
};
connectWithRetry();

// Track visitor endpoint
app.post('/track-visitor', async (req, res) => {
  try {
    const { event, timestamp, widgetId } = req.body;
    if (!widgetId) {
      return res.status(400).send({ error: 'widgetId is required' });
    }

    // Validate widgetId
    const widget = await Widget.findOne({ widgetId });
    if (!widget) {
      return res.status(400).send({ error: 'Invalid widgetId' });
    }
    console.log(req.headers['x-forwarded-for'])
    console.log(req.connection.remoteAddress)
const ip = req.body.ip || req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    console.log(ip)
    // Fetch geolocation data from ipwhois.io
    const geoResponse = await axios.get(`https://ipwhois.app/json/${ip}`);
    if (!geoResponse.data.success) {
      throw new Error('Geolocation failed');
    }
    const { country, region } = geoResponse.data;

    const visitor = new Visitor({
      event,
      timestamp: new Date(timestamp),
      ip,
      widgetId,
      location: { country, region },
      metadata: {},
    });

    await visitor.save();
    res.status(200).send({ message: 'Visitor tracked' });
  } catch (error) {
    console.error('Error tracking visitor:', error.message);
    res.status(500).send({ error: 'Failed to track visitor' });
  }
});

// All visitor stats endpoint
app.get('/visitor-stats', async (req, res) => {
  try {
    const totalVisitors = await Visitor.countDocuments({ event: 'chat_opened' });
    const locations = await Visitor.aggregate([
      { $match: { event: 'chat_opened' } },
      {
        $group: {
          _id: {
            country: '$location.country',
            region: '$location.region',
            widgetId: '$widgetId',
          },
          count: { $sum: 1 },
        },
      },
      {
        $project: {
          location: {
            country: '$_id.country',
            region: '$_id.region',
          },
          widgetId: '$_id.widgetId',
          count: 1,
          _id: 0,
        },
      },
    ]);

    res.status(200).send({ totalVisitors, locations });
  } catch (error) {
    console.error('Error fetching visitor stats:', error);
    res.status(500).send({ error: 'Failed to fetch stats' });
  }
});

// Visitor stats for specific widget endpoint
app.get('/visitor-stats/:widgetId', async (req, res) => {
  try {
    const { widgetId } = req.params;
    const totalVisitors = await Visitor.countDocuments({
      event: 'chat_opened',
      widgetId,
    });
    const locations = await Visitor.aggregate([
      { $match: { event: 'chat_opened', widgetId } },
      {
        $group: {
          _id: {
            country: '$location.country',
            region: '$location.region',
          },
          count: { $sum: 1 },
        },
      },
      {
        $project: {
          location: {
            country: '$_id.country',
            region: '$_id.region',
          },
          count: 1,
          _id: 0,
        },
      },
    ]);

    res.status(200).send({ totalVisitors, locations });
  } catch (error) {
    console.error('Error fetching widget stats:', error);
    res.status(500).send({ error: 'Failed to fetch widget stats' });
  }
});

app.listen(3000, () => console.log('Server running on port 3000'));